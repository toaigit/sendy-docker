1.  Update the vars.env with appropriate values.
2.  Generate sp-key.pem and sp-cert.pem using keygen.sh script and place this in the data/sendy-web/cert (/etc/shibboleth2)
3.  Place your apache certs (apache-key.pem, apache-cert.pem, apache-chain.pem) in the data/sendy-web/cert (/etc/shibboleth2)
4.  Place your php.ini in the data/sendy-web/conf/php.ini (etc/php/7.4/apache2/php.ini)
5.  Place the sendy.cnf to the data/sendy-db/conf (/etc/mysql/conf.d) folder
6.  Run the gen-vars.sh script to create build.sh, docker-compose.yml file
7.  Run the build.sh script to create docker images sendy-web and sendy-db
8.  Run dbinit.sh to create database sendy and user sendy
9.  Register your SAML using the sp-metadata.xml (generated by step 6 - gen-vars.sh)
10. Bring up web and db using docker-compose.yml (run start.sendy)
11. Access sendy URL https://your-url/prod.

NOTEs:

Sendy has no SAML integration so we protect Sendy URL with SSO.  User will need to login twice.
    One for SSO and one for Local Sendy Authentication.
Sendy cronjob should be run on host.  You can schedule a cronjob on host with the following command :
   docker exec -it sendy-web sh -c "/usr/bin/php /var/www/html/prod/scheduled.php"

Local Directory Structure (persistent storage)

BASEPATH
     sendy-web/log (/var/log)
     sendy-web/html (/var/www/html DocumentRoot)
     sendy-web/conf (/etc/php/7.4/apache2) 
     sendy-web/conf/php.ini (/etc/php/7.4/apache2/php.ini)
     sendy-web/cert  (/etc/shibboleth2)
     sendy-web/cert/sp-key.pem
     sendy-web/cert/sp-cert.pem
     sendy-web/cert/apache-cert.pem
     sendy-web/cert/apache-key.pem
     sendy-web/cert/apache-chain.pem
     sendy-db/conf (etc/mysql/conf.d)
     sendy-db/conf/sendy.cnf
     sendy-db/data (/var/lib/mysql)
     sendy-db/log (/var/log)

You also need to setup SNS/SES on your AWS account  according to Sendy Instruction.
